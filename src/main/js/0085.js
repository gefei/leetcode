function get_matrix() {
   let x = [
      ['1','0','1'],
      ['1','1','1'],
      ['0','1','1'],
      ['1','0','0'],
   ] 
   // x = [
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1'],
   //   ['1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['0','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['0','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','0','1','1','0','1','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','1','1'],
   //   ['0','1','1','0','1','1','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','0','1'],
   //   ['0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','0','0','1','1','0','1','1','0','1','0','1','0','1'],
   //   ['1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','0','1','0','1','1','0','1','0','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','1'],
   //   ['1','1','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['1','0','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1'],
   //   ['1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1'],
   //   ['1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1'],
   //   ['1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','1','1','1','0','0','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'],
   //   ['1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','1','1'],
   //   ['1','1','0','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1'],
   //   ['1','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','0','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1'],
   //   ['1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1'],
   //   ['1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','0','1','1','0','1','1'],
   //   ['1','1','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['1','1','0','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1'],
   //   ['1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'],
   //   ['0','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','0','1','0','1','1','0','1','1','1','1','1','1','1','1'],
   //   ['1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1'],
   //   ['1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1'],
   //   ['0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'],
   //   ['0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1'],
   //   ['0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','0','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','0','1','1'],
   //   ['1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0'],
   //   ['1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','0','1','1','1','1'],
   //   ['1','1','0','1','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','0','1','0','0'],
   //   ['0','1','1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','0','1','1','0','1','1','1','0','1']
   // ]
   return x
}

function print_matrix(matrix) {
    console.log((matrix.map(row => row.join(" "))).join('\n'))
}

function get_column(matrix, col_idx) {
    return matrix.map(row => row[col_idx])
}

function get_col_sections(col) {
    let res = []
    let start = 0
    let stop = false
    while (start < col.length && !stop) {
        while (start < col.length && col[start] != '1') start++
        if (start === col.length) stop = true
        else {
            let end = start + 1
            while (end < col.length && col[end] != '0') end++
            res.push([start, end-1])
            start = end + 1
        }
    }
    return res
}

function get_intersections(sections1, sections2) {
    let res = []
    let idx1 = 0, idx2 = 0
    while (idx1 < sections1.length && idx2 < sections2.length) {
        let x1 = sections1[idx1][0]
        let x2 = sections1[idx1][1]
        let y1 = sections2[idx2][0]
        let y2 = sections2[idx2][1]
        if (x2 < y1) {
            idx1++
        } else if (y2 < x1) {
            idx2++
        } else if (x1 <= y1 && x2 <= y2) {
            res.push([y1, x2])
            idx1++
        } else if (x1 <= y1 && x2 > y2) {
            res.push([y1, y2])
            idx2++
        } else if (x1 > y1 && x2 <= y2) {
            res.push([x1, x2])
            idx1++
        } else if (x1 > y1 && x1 <= y2 && x2 > y2) {
            res.push([x1, y2])
            idx2 += 1
        } else {
            alert("wrong!")
        }
    }
    return res
}

function remove_colors(cells) {
    for (let row of cells) {
        for (let cell of row) {
            cell.fill("#fff")
        }
    }
}

function maximal_rectangle(matrix, update_gui, cells) {
    if (matrix.length === 0) return 0
    let max_area_to_this_col = 0
    for (let left_idx = 0; left_idx < matrix[0].length; left_idx++) {
        max_area_to_this_col = 
            Math.max(max_area_to_this_col, max_from(matrix, left_idx, update_gui, cells))
    }
    return max_area_to_this_col
}

let left = -1, right = 0;
function next() {
    remove_colors(cells)
    left++
    if (left >= matrix[0].length) return
    max_from(matrix, left, update_gui, cells)
}

function reset() {
    left = -1
    right = 0
    remove_colors(cells)
}

function max_from(matrix, left_idx, update_gui, cells) {
    let max_area_to_this_col = 0
    let left_col = get_column(matrix, left_idx)
    let cur_sections = get_col_sections(left_col)
    for (let right_idx = left_idx; right_idx <= matrix[0].length; right_idx++) {
        let right_col = get_column(matrix, right_idx)
        let right_sections = get_col_sections(right_col)
        cur_sections = get_intersections(cur_sections, right_sections)
        update_gui(left_idx, right_idx, cur_sections, cells)
        if (cur_sections.length > 0) {
            let areas = cur_sections.map(x => (x[1] - x[0] + 1) * (right_idx - left_idx + 1))
            max_area_to_this_col = Math.max(...areas, max_area_to_this_col)
        }
    }
    console.log(left_idx, max_area_to_this_col)
    return max_area_to_this_col
}
// k

const draw = SVG().addTo('#output').size(800,800)
const size = 15
const left_margin = 20
const top_margin = 20

function update_gui(left_idx, right_idx, intersections, cells) {
    // console.log(intersections)
    for (let x = left_idx; x <= right_idx; x++) {
        for (let inter of intersections) {
            for (let y = inter[0]; y <= inter[1]; y++) {
                cells[y][x].fill('#0f0')
            }
        }
    }
}

function draw_cells(matrix) {
    const width  = matrix[0].length
    const height = matrix.length
    let res = []
    for (let y = 0; y < height; y++) {
        res.push([])
        for (let x = 0; x < width; x++) {
            res[y].push(
                draw.rect(size, size).
                move(left_margin+(x-1)*size, top_margin+(y-1)*size).
                stroke('#000').
                fill('#fff')
            )
            draw.text(matrix[y][x]).
                attr({'font-size': 13}).
                move(left_margin+(x-1)*size+2, top_margin+(y-1)*size+2)
        }
    }
    for (let x = 0; x < width; x++) {
        draw.text(x%10).
            attr({'font-size': 13}).
            move(left_margin+(x-1)*size+2, top_margin+(height)*size+2)
    }
    return res
}

let matrix = get_matrix()
print_matrix(matrix)
let cells = draw_cells(matrix)

console.log(maximal_rectangle(matrix, update_gui, cells))


//let a = get_column(matrix, 0)
//let b = get_column(matrix, 1)
// let c = get_column(matrix, 2)
//console.log(a.join(""))
//console.log(b.join(""))
// console.log(c)
//console.log(get_intersections(get_col_sections(a), get_col_sections(b)))
