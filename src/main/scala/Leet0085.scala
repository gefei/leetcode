// https://leetcode.com/problems/maximal-rectangle/
import scala.collection.mutable.ListBuffer

class Leet0085 {
  def printArray(a: Array[Array[Char]]): Unit = {
    println(a.indices.map(i=>a(i).mkString(", ")).mkString("\n"))
  }

  def getColumn(matrix: Array[Array[Char]], colIdx: Int): Array[Char]  = {
    matrix.map(row => row(colIdx))
  }

  def getColSections(col: Array[Char]): scala.collection.mutable.ListBuffer[(Int, Int)] = {
    val res = new ListBuffer[(Int, Int)]
    var start = 0
    var break = false
    while (start < col.length && !break) {
      while (start < col.length && col(start) != '1') start += 1
      if (start == col.length)  break = true;
      else {
        var end = start + 1
        while (end < col.length && col(end) != '0') end += 1
        res.addOne(start, end - 1)
        start = end + 1
      }
    }
    res
  }

  def getInteractions(sections1: ListBuffer[(Int, Int)], sections2: ListBuffer[(Int, Int)]): ListBuffer[(Int, Int)] = {
    val res = new ListBuffer[(Int, Int)]
    var (idx1, idx2) = (0, 0)
    while (idx1 < sections1.length && idx2 < sections2.length) {
      val (x1, x2, y1, y2) = (sections1(idx1)._1, sections1(idx1)._2, sections2(idx2)._1, sections2(idx2)._2)
      if (x2 < y1) {
        idx1 += 1
      } else if (y2 < x1) {
        idx2 += 1
      } else if (x1 <= y1 && x2 <= y2) {
        res.addOne(y1, x2)
        idx1 += 1
      } else if (x1 <= y1 && x2 > y2) {
        res.addOne(y1, y2)
        idx2 += 1
      } else if (x1 > y1 && x2 <= y2) {
        res.addOne(x1, x2)
        idx1 += 1
      } else if (x1 > y1 && x1 <= y2 && x2 > y2) {
        res.addOne(x1, y2)
        idx2 += 1
      }
    }
    res
  }

  def maximalRectangle(matrix: Array[Array[Char]]): Int = {
    if (matrix.isEmpty) return 0
    var maxAreaToThisCol = 0
    for (leftIdx <- matrix(0).indices) {
      val leftCol = getColumn(matrix, leftIdx)
      var curSections = getColSections(leftCol)
      if (curSections.nonEmpty) maxAreaToThisCol = curSections.map(x => (x._2-x._1+1)).max.max(maxAreaToThisCol)
      for (rightIdx <- leftIdx+1 until matrix(0).length) {
        var rightCol = getColumn(matrix, rightIdx)
        var rightSections = getColSections(rightCol)
        curSections = getInteractions(curSections, rightSections)
        if (curSections.nonEmpty) {
          val areas = curSections.map(x => (x._2-x._1+1) * (rightIdx - leftIdx + 1))
          val b = areas.max
          val c= b.max(maxAreaToThisCol)
          maxAreaToThisCol = c
        }
      }
    }
    maxAreaToThisCol
  }
}


object Leet0085 {
  def main(args: Array[String]): Unit = {
    val leet = new Leet0085();
    var x = Array(
      Array('1','0','1'),
      Array('1','1','1'),
      Array('0','1','1'),
      Array('1','0','0'),
    )
    x = Array(
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1'),
      Array('1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('0','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('0','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','0','1','1','0','1','1','1','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','1','1'),
      Array('0','1','1','0','1','1','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','0','1'),
      Array('0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','0','0','1','1','0','1','1','0','1','0','1','0','1'),
      Array('1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','0','1','0','1','1','0','1','0','1','1'),
      Array('1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','1'),
      Array('1','1','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('1','0','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1'),
      Array('1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1'),
      Array('1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1'),
      Array('1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','1','1','1','0','0','1','1','1','1','1'),
      Array('1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'),
      Array('1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1'),
      Array('1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','1','1'),
      Array('1','1','0','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'),
      Array('1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1'),
      Array('1','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','0','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1'),
      Array('1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1'),
      Array('1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1'),
      Array('1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','0','1','1','0','1','1'),
      Array('1','1','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('1','1','0','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1'),
      Array('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'),
      Array('0','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','0','1','0','1','1','0','1','1','1','1','1','1','1','1'),
      Array('1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1'),
      Array('1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1'),
      Array('0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'),
      Array('0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1'),
      Array('0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','0','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','0','1','1'),
      Array('1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0'),
      Array('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','0','1','1','1','1'),
      Array('1','1','0','1','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','0','1','0','0'),
      Array('0','1','1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','0','1','1','0','1','1','1','0','1')
    )
    leet.printArray(x)
    /*
    println(leet.getColumn(x, 0).mkString)
    println(leet.getColumn(x, 1).mkString)
    println(leet.getColumn(x, 2).mkString)
    val a = leet.getColSections(leet.getColumn(x, 0))
    val b = leet.getColSections(leet.getColumn(x, 1))
    val c = leet.getColSections(leet.getColumn(x, 2))
    val d = leet.getColSections(leet.getColumn(x, 3))
    println(a)
    println(b)
    println(c)
    println()
    println(leet.getInteractions(a, a))
    println(leet.getInteractions(a, b))
    println(leet.getInteractions(b, a))
    println(leet.getInteractions(a, c))
    println(leet.getInteractions(c, a))
    println(leet.getInteractions(a, d))
    println(leet.getInteractions(d, a))
    println()
     */
    println(leet.maximalRectangle(matrix = x))
  }

}




